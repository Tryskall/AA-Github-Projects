// File bejeweled-spec.js for mocha testing bejeweled.js Bejeweled class

const { expect} = require('chai');
const Screen = require("../class/screen");
const Bejeweled = require("../class/bejeweled.js");

describe ('Bejeweled', function () {
  describe('swapping fruit', function() {
    let grid;

    context('if horizontal match', () => {
        it('should swapLeft', function() {
            grid = [
                [ '游볳', '游꼖', '游본', '游꼡', '游꼙', '游볳', '游꼖', '游꼖' ],
                [ '游꼙', '游꼙', '游볳', '游볳', '游꼖', '游본', '游꼡', '游꼙' ],
                [ '游볳', '游볳', '游꼙', '游꼖', '游꼖', '游볳', '游꼙', '游꼡' ],
                [ '游꼙', '游꼙', '游꼖', '游꼡', '游꼡', '游볳', '游꼙', '游본' ],
                [ '游꼡', '游꼡', '游꼙', '游꼙', '游본', '游꼙', '游볳', '游볳' ],
                [ '游꼙', '游꼙', '游꼖', '游볳', '游꼙', '游꼡', '游볳', '游꼡' ],
                [ '游본', '游꼖', '游본', '游꼡', '游꼖', '游볳', '游꼖', '游꼙' ],
                [ '游볳', '游본', '游본', '游꼖', '游꼙', '游본', '游볳', '游꼖' ]
            ];
            expect(Bejeweled.swapLeft(grid, 4, 5)).to.be.true;
            expect(grid).to.deep.equal([
                [ '游볳', '游꼖', '游본', '游꼡', '游꼙', '游볳', '游꼖', '游꼖' ],
                [ '游꼙', '游꼙', '游볳', '游볳', '游꼖', '游본', '游꼡', '游꼙' ],
                [ '游볳', '游볳', '游꼙', '游꼖', '游꼖', '游볳', '游꼙', '游꼡' ],
                [ '游꼙', '游꼙', '游꼖', '游꼡', '游꼡', '游볳', '游꼙', '游본' ],
                [ '游꼡', '游꼡', '游꼙', '游꼙', '游꼙', '游본', '游볳', '游볳' ],
                [ '游꼙', '游꼙', '游꼖', '游볳', '游꼙', '游꼡', '游볳', '游꼡' ],
                [ '游본', '游꼖', '游본', '游꼡', '游꼖', '游볳', '游꼖', '游꼙' ],
                [ '游볳', '游본', '游본', '游꼖', '游꼙', '游본', '游볳', '游꼖' ]
            ]);
        });
    });

    context('if vertical match', () => {
        it('should swapLeft', function() {
            grid = [
                [ '游볳', '游꼖', '游본', '游꼡', '游꼙', '游볳', '游꼖', '游꼖' ],
                [ '游꼙', '游꼙', '游볳', '游볳', '游꼖', '游본', '游꼡', '游꼙' ],
                [ '游볳', '游볳', '游꼙', '游꼖', '游꼖', '游볳', '游꼙', '游꼡' ],
                [ '游꼙', '游꼙', '游꼖', '游꼡', '游꼡', '游볳', '游꼙', '游본' ],
                [ '游꼡', '游꼡', '游꼙', '游꼙', '游본', '游꼙', '游볳', '游볳' ],
                [ '游꼙', '游꼙', '游꼖', '游볳', '游꼙', '游꼡', '游볳', '游꼡' ],
                [ '游본', '游꼖', '游본', '游꼡', '游꼖', '游볳', '游꼖', '游꼙' ],
                [ '游볳', '游본', '游본', '游꼖', '游꼙', '游본', '游볳', '游꼖' ]
            ];
            expect(Bejeweled.swapLeft(grid, 2, 2)).to.be.true;
            expect(grid).to.deep.equal([
                [ '游볳', '游꼖', '游본', '游꼡', '游꼙', '游볳', '游꼖', '游꼖' ],
                [ '游꼙', '游꼙', '游볳', '游볳', '游꼖', '游본', '游꼡', '游꼙' ],
                [ '游볳', '游꼙', '游볳', '游꼖', '游꼖', '游볳', '游꼙', '游꼡' ],
                [ '游꼙', '游꼙', '游꼖', '游꼡', '游꼡', '游볳', '游꼙', '游본' ],
                [ '游꼡', '游꼡', '游꼙', '游꼙', '游본', '游꼙', '游볳', '游볳' ],
                [ '游꼙', '游꼙', '游꼖', '游볳', '游꼙', '游꼡', '游볳', '游꼡' ],
                [ '游본', '游꼖', '游본', '游꼡', '游꼖', '游볳', '游꼖', '游꼙' ],
                [ '游볳', '游본', '游본', '游꼖', '游꼙', '游본', '游볳', '游꼖' ]
            ]);
        });
    });

    context('if horizontal match', () => {
        it('should swapRight', function() {
            grid = [
                [ '游볳', '游꼖', '游본', '游꼡', '游꼙', '游볳', '游꼖', '游꼖' ],
                [ '游꼙', '游꼙', '游볳', '游볳', '游꼖', '游본', '游꼡', '游꼙' ],
                [ '游볳', '游꼖', '游볳', '游꼖', '游꼖', '游볳', '游꼙', '游꼡' ],
                [ '游꼙', '游꼙', '游꼖', '游꼡', '游꼡', '游볳', '游꼙', '游본' ],
                [ '游꼡', '游꼡', '游꼙', '游꼙', '游본', '游꼙', '游볳', '游볳' ],
                [ '游꼙', '游꼙', '游꼖', '游볳', '游꼙', '游꼡', '游볳', '游꼡' ],
                [ '游본', '游꼖', '游본', '游꼡', '游꼖', '游볳', '游꼖', '游꼙' ],
                [ '游볳', '游본', '游본', '游꼖', '游꼙', '游본', '游볳', '游꼖' ]
        ];
            expect(Bejeweled.swapRight(grid, 2, 1)).to.be.true;
            expect(grid).to.deep.equal([
                [ '游볳', '游꼖', '游본', '游꼡', '游꼙', '游볳', '游꼖', '游꼖' ],
                [ '游꼙', '游꼙', '游볳', '游볳', '游꼖', '游본', '游꼡', '游꼙' ],
                [ '游볳', '游볳', '游꼖', '游꼖', '游꼖', '游볳', '游꼙', '游꼡' ],
                [ '游꼙', '游꼙', '游꼖', '游꼡', '游꼡', '游볳', '游꼙', '游본' ],
                [ '游꼡', '游꼡', '游꼙', '游꼙', '游본', '游꼙', '游볳', '游볳' ],
                [ '游꼙', '游꼙', '游꼖', '游볳', '游꼙', '游꼡', '游볳', '游꼡' ],
                [ '游본', '游꼖', '游본', '游꼡', '游꼖', '游볳', '游꼖', '游꼙' ],
                [ '游볳', '游본', '游본', '游꼖', '游꼙', '游본', '游볳', '游꼖' ]
            ]);
        });
    });

    context('if vertical match', () => {
        it('should swapRight', function() {
            grid = [
                [ '游볳', '游꼖', '游본', '游꼡', '游꼙', '游볳', '游꼖', '游꼖' ],
                [ '游꼙', '游꼙', '游볳', '游볳', '游꼖', '游본', '游꼡', '游꼙' ],
                [ '游볳', '游볳', '游꼙', '游꼖', '游꼖', '游볳', '游꼙', '游꼡' ],
                [ '游꼙', '游꼙', '游꼖', '游꼡', '游꼡', '游볳', '游꼙', '游본' ],
                [ '游꼡', '游꼡', '游꼙', '游꼙', '游본', '游꼙', '游볳', '游볳' ],
                [ '游꼙', '游꼙', '游꼖', '游볳', '游꼙', '游꼡', '游볳', '游꼡' ],
                [ '游본', '游꼖', '游본', '游꼡', '游꼖', '游볳', '游꼖', '游꼙' ],
                [ '游볳', '游본', '游본', '游꼖', '游꼙', '游본', '游볳', '游꼖' ]
                ];
            expect(Bejeweled.swapRight(grid, 2, 1)).to.be.true;
            expect(grid).to.deep.equal([
                [ '游볳', '游꼖', '游본', '游꼡', '游꼙', '游볳', '游꼖', '游꼖' ],
                [ '游꼙', '游꼙', '游볳', '游볳', '游꼖', '游본', '游꼡', '游꼙' ],
                [ '游볳', '游꼙', '游볳', '游꼖', '游꼖', '游볳', '游꼙', '游꼡' ],
                [ '游꼙', '游꼙', '游꼖', '游꼡', '游꼡', '游볳', '游꼙', '游본' ],
                [ '游꼡', '游꼡', '游꼙', '游꼙', '游본', '游꼙', '游볳', '游볳' ],
                [ '游꼙', '游꼙', '游꼖', '游볳', '游꼙', '游꼡', '游볳', '游꼡' ],
                [ '游본', '游꼖', '游본', '游꼡', '游꼖', '游볳', '游꼖', '游꼙' ],
                [ '游볳', '游본', '游본', '游꼖', '游꼙', '游본', '游볳', '游꼖' ]
            ]);
        });

        it('should swapUp', function() {
            grid = [
                [ '游볳', '游꼖', '游본', '游꼡', '游꼙', '游볳', '游꼖', '游꼖' ],
                [ '游꼙', '游꼙', '游볳', '游볳', '游꼖', '游본', '游꼡', '游꼙' ],
                [ '游볳', '游볳', '游꼙', '游꼖', '游꼖', '游볳', '游꼙', '游꼡' ],
                [ '游꼙', '游꼙', '游꼖', '游꼡', '游꼡', '游볳', '游꼙', '游본' ],
                [ '游꼡', '游꼡', '游꼙', '游꼙', '游본', '游꼙', '游볳', '游볳' ],
                [ '游꼙', '游꼙', '游꼖', '游볳', '游꼙', '游꼡', '游볳', '游꼡' ],
                [ '游본', '游꼖', '游본', '游꼡', '游꼖', '游볳', '游꼖', '游꼙' ],
                [ '游볳', '游본', '游본', '游꼖', '游꼙', '游본', '游볳', '游꼖' ]
            ];
            expect(Bejeweled.swapUp(grid, 7, 6)).to.be.true;
            expect(grid).to.deep.equal([
                [ '游볳', '游꼖', '游본', '游꼡', '游꼙', '游볳', '游꼖', '游꼖' ],
                [ '游꼙', '游꼙', '游볳', '游볳', '游꼖', '游본', '游꼡', '游꼙' ],
                [ '游볳', '游볳', '游꼙', '游꼖', '游꼖', '游볳', '游꼙', '游꼡' ],
                [ '游꼙', '游꼙', '游꼖', '游꼡', '游꼡', '游볳', '游꼙', '游본' ],
                [ '游꼡', '游꼡', '游꼙', '游꼙', '游본', '游꼙', '游볳', '游볳' ],
                [ '游꼙', '游꼙', '游꼖', '游볳', '游꼙', '游꼡', '游볳', '游꼡' ],
                [ '游본', '游꼖', '游본', '游꼡', '游꼖', '游볳', '游볳', '游꼙' ],
                [ '游볳', '游본', '游본', '游꼖', '游꼙', '游본', '游꼖', '游꼖' ]
            ]);
        });
    });

    context('if horizontal match', () => {
        it('should swapUp', function() {
            grid = [
                [ '游볳', '游꼖', '游본', '游꼡', '游꼙', '游볳', '游꼖', '游꼖' ],
                [ '游꼙', '游꼙', '游볳', '游볳', '游꼖', '游본', '游꼡', '游꼙' ],
                [ '游볳', '游볳', '游꼙', '游꼖', '游꼖', '游볳', '游꼙', '游꼡' ],
                [ '游꼙', '游꼙', '游꼖', '游꼡', '游꼡', '游볳', '游꼙', '游본' ],
                [ '游꼡', '游꼡', '游꼙', '游꼙', '游본', '游꼙', '游볳', '游볳' ],
                [ '游꼙', '游꼙', '游꼖', '游볳', '游꼙', '游꼡', '游볳', '游꼡' ],
                [ '游본', '游꼖', '游본', '游꼡', '游꼖', '游볳', '游꼖', '游꼙' ],
                [ '游볳', '游본', '游본', '游꼖', '游꼙', '游본', '游볳', '游꼖' ]
            ];
            expect(Bejeweled.swapUp(grid, 2, 1)).to.be.true;
            expect(grid).to.deep.equal([
                [ '游볳', '游꼖', '游본', '游꼡', '游꼙', '游볳', '游꼖', '游꼖' ],
                [ '游꼙', '游볳', '游볳', '游볳', '游꼖', '游본', '游꼡', '游꼙' ],
                [ '游볳', '游꼙', '游꼙', '游꼖', '游꼖', '游볳', '游꼙', '游꼡' ],
                [ '游꼙', '游꼙', '游꼖', '游꼡', '游꼡', '游볳', '游꼙', '游본' ],
                [ '游꼡', '游꼡', '游꼙', '游꼙', '游본', '游꼙', '游볳', '游볳' ],
                [ '游꼙', '游꼙', '游꼖', '游볳', '游꼙', '游꼡', '游볳', '游꼡' ],
                [ '游본', '游꼖', '游본', '游꼡', '游꼖', '游볳', '游꼖', '游꼙' ],
                [ '游볳', '游본', '游본', '游꼖', '游꼙', '游본', '游볳', '游꼖' ]
            ]);
          });
        });

    context('if vertical match', () => {
        it('should swapDown', function() {
            grid = [
                [ '游볳', '游꼖', '游본', '游꼡', '游꼙', '游볳', '游꼖', '游꼖' ],
                [ '游꼙', '游꼙', '游볳', '游볳', '游꼖', '游본', '游꼡', '游꼙' ],
                [ '游볳', '游볳', '游꼙', '游꼖', '游꼖', '游볳', '游꼙', '游꼡' ],
                [ '游꼙', '游꼙', '游꼖', '游꼡', '游꼡', '游볳', '游꼙', '游본' ],
                [ '游꼡', '游꼡', '游꼙', '游꼙', '游본', '游꼙', '游볳', '游볳' ],
                [ '游꼙', '游꼙', '游꼖', '游볳', '游꼙', '游꼡', '游볳', '游꼡' ],
                [ '游본', '游꼖', '游본', '游꼡', '游꼖', '游볳', '游꼖', '游꼙' ],
                [ '游볳', '游본', '游본', '游꼖', '游꼙', '游본', '游볳', '游꼖' ]
            ];
            expect(Bejeweled.swapDown(grid, 0, 5)).to.be.true;
            expect(grid).to.deep.equal([
                [ '游볳', '游꼖', '游본', '游꼡', '游꼙', '游본', '游꼖', '游꼖' ],
                [ '游꼙', '游꼙', '游볳', '游볳', '游꼖', '游볳', '游꼡', '游꼙' ],
                [ '游볳', '游볳', '游꼙', '游꼖', '游꼖', '游볳', '游꼙', '游꼡' ],
                [ '游꼙', '游꼙', '游꼖', '游꼡', '游꼡', '游볳', '游꼙', '游본' ],
                [ '游꼡', '游꼡', '游꼙', '游꼙', '游본', '游꼙', '游볳', '游볳' ],
                [ '游꼙', '游꼙', '游꼖', '游볳', '游꼙', '游꼡', '游볳', '游꼡' ],
                [ '游본', '游꼖', '游본', '游꼡', '游꼖', '游볳', '游꼖', '游꼙' ],
                [ '游볳', '游본', '游본', '游꼖', '游꼙', '游본', '游볳', '游꼖' ]
            ]);
        });
    });

    context('if horizontal match', () => {
        it('should swapDown', function() {
            grid = [
                [ '游볳', '游꼖', '游본', '游꼡', '游꼙', '游볳', '游꼖', '游꼖' ],
                [ '游꼙', '游꼙', '游볳', '游볳', '游꼖', '游본', '游꼡', '游꼙' ],
                [ '游볳', '游볳', '游꼙', '游꼖', '游꼖', '游볳', '游꼙', '游꼡' ],
                [ '游꼙', '游꼙', '游꼖', '游꼡', '游꼡', '游볳', '游꼙', '游본' ],
                [ '游꼡', '游꼡', '游꼙', '游꼙', '游본', '游꼙', '游볳', '游볳' ],
                [ '游꼙', '游꼙', '游꼖', '游볳', '游꼙', '游꼡', '游볳', '游꼡' ],
                [ '游본', '游꼖', '游본', '游꼡', '游꼖', '游볳', '游꼖', '游꼙' ],
                [ '游볳', '游본', '游본', '游꼖', '游꼙', '游본', '游볳', '游꼖' ]
            ];
            expect(Bejeweled.swapDown(grid, 3, 5)).to.be.true;
            expect(grid).to.deep.equal([
                [ '游볳', '游꼖', '游본', '游꼡', '游꼙', '游볳', '游꼖', '游꼖' ],
                [ '游꼙', '游꼙', '游볳', '游볳', '游꼖', '游본', '游꼡', '游꼙' ],
                [ '游볳', '游볳', '游꼙', '游꼖', '游꼖', '游볳', '游꼙', '游꼡' ],
                [ '游꼙', '游꼙', '游꼖', '游꼡', '游꼡', '游꼙', '游꼙', '游본' ],
                [ '游꼡', '游꼡', '游꼙', '游꼙', '游본', '游볳', '游볳', '游볳' ],
                [ '游꼙', '游꼙', '游꼖', '游볳', '游꼙', '游꼡', '游볳', '游꼡' ],
                [ '游본', '游꼖', '游본', '游꼡', '游꼖', '游볳', '游꼖', '游꼙' ],
                [ '游볳', '游본', '游본', '游꼖', '游꼙', '游본', '游볳', '游꼖' ] ]);
        });
      });
    });

    context('if there is no row above selection', () => {
        it('should not swapUp', function() {
            grid = [
                [ '游볳', '游꼖', '游본', '游꼡', '游꼙', '游볳', '游꼖', '游꼖' ],
                [ '游꼙', '游꼙', '游볳', '游볳', '游꼖', '游본', '游꼡', '游꼙' ],
                [ '游볳', '游볳', '游꼙', '游꼖', '游꼖', '游볳', '游꼙', '游꼡' ],
                [ '游꼙', '游꼙', '游꼖', '游꼡', '游꼡', '游볳', '游꼙', '游본' ],
                [ '游꼡', '游꼡', '游꼙', '游꼙', '游본', '游꼙', '游볳', '游볳' ],
                [ '游꼙', '游꼙', '游꼖', '游볳', '游꼙', '游꼡', '游볳', '游꼡' ],
                [ '游본', '游꼖', '游본', '游꼡', '游꼖', '游볳', '游꼖', '游꼙' ],
                [ '游볳', '游본', '游본', '游꼖', '游꼙', '游본', '游볳', '游꼖' ]
            ];
            expect(Bejeweled.swapUp(grid, 0, 6)).to.be.false;
            expect(grid).to.deep.equal([
                [ '游볳', '游꼖', '游본', '游꼡', '游꼙', '游볳', '游꼖', '游꼖' ],
                [ '游꼙', '游꼙', '游볳', '游볳', '游꼖', '游본', '游꼡', '游꼙' ],
                [ '游볳', '游볳', '游꼙', '游꼖', '游꼖', '游볳', '游꼙', '游꼡' ],
                [ '游꼙', '游꼙', '游꼖', '游꼡', '游꼡', '游볳', '游꼙', '游본' ],
                [ '游꼡', '游꼡', '游꼙', '游꼙', '游본', '游꼙', '游볳', '游볳' ],
                [ '游꼙', '游꼙', '游꼖', '游볳', '游꼙', '游꼡', '游볳', '游꼡' ],
                [ '游본', '游꼖', '游본', '游꼡', '游꼖', '游볳', '游꼖', '游꼙' ],
                [ '游볳', '游본', '游본', '游꼖', '游꼙', '游본', '游볳', '游꼖' ]
            ]);
        });
    });

    context('if there is no row below selection', () => {
        it('should not swapDown', function() {
            grid = [
                [ '游볳', '游꼖', '游본', '游꼡', '游꼙', '游볳', '游꼖', '游꼖' ],
                [ '游꼙', '游꼙', '游볳', '游볳', '游꼖', '游본', '游꼡', '游꼙' ],
                [ '游볳', '游볳', '游꼙', '游꼖', '游꼖', '游볳', '游꼙', '游꼡' ],
                [ '游꼙', '游꼙', '游꼖', '游꼡', '游꼡', '游볳', '游꼙', '游본' ],
                [ '游꼡', '游꼡', '游꼙', '游꼙', '游본', '游꼙', '游볳', '游볳' ],
                [ '游꼙', '游꼙', '游꼖', '游볳', '游꼙', '游꼡', '游볳', '游꼡' ],
                [ '游본', '游꼖', '游본', '游꼡', '游꼖', '游볳', '游꼖', '游꼙' ],
                [ '游볳', '游본', '游본', '游꼖', '游꼙', '游본', '游볳', '游꼖' ]
            ];
            expect(Bejeweled.swapDown(grid, grid.length - 1, 6)).to.be.false;
            expect(grid).to.deep.equal([
                [ '游볳', '游꼖', '游본', '游꼡', '游꼙', '游볳', '游꼖', '游꼖' ],
                [ '游꼙', '游꼙', '游볳', '游볳', '游꼖', '游본', '游꼡', '游꼙' ],
                [ '游볳', '游볳', '游꼙', '游꼖', '游꼖', '游볳', '游꼙', '游꼡' ],
                [ '游꼙', '游꼙', '游꼖', '游꼡', '游꼡', '游볳', '游꼙', '游본' ],
                [ '游꼡', '游꼡', '游꼙', '游꼙', '游본', '游꼙', '游볳', '游볳' ],
                [ '游꼙', '游꼙', '游꼖', '游볳', '游꼙', '游꼡', '游볳', '游꼡' ],
                [ '游본', '游꼖', '游본', '游꼡', '游꼖', '游볳', '游꼖', '游꼙' ],
                [ '游볳', '游본', '游본', '游꼖', '游꼙', '游본', '游볳', '游꼖' ]
            ]);
        });
    });

    context('if there is no column to the left of selection', () => {
        it('should not swapLeft', function() {
            grid = [
                [ '游볳', '游꼖', '游본', '游꼡', '游꼙', '游볳', '游꼖', '游꼖' ],
                [ '游꼙', '游꼙', '游볳', '游볳', '游꼖', '游본', '游꼡', '游꼙' ],
                [ '游볳', '游볳', '游꼙', '游꼖', '游꼖', '游볳', '游꼙', '游꼡' ],
                [ '游꼙', '游꼙', '游꼖', '游꼡', '游꼡', '游볳', '游꼙', '游본' ],
                [ '游꼡', '游꼡', '游꼙', '游꼙', '游본', '游꼙', '游볳', '游볳' ],
                [ '游꼙', '游꼙', '游꼖', '游볳', '游꼙', '游꼡', '游볳', '游꼡' ],
                [ '游본', '游꼖', '游본', '游꼡', '游꼖', '游볳', '游꼖', '游꼙' ],
                [ '游볳', '游본', '游본', '游꼖', '游꼙', '游본', '游볳', '游꼖' ]
            ];
            expect(Bejeweled.swapLeft(grid, 2, 0)).to.be.false;
            expect(grid).to.deep.equal([
                [ '游볳', '游꼖', '游본', '游꼡', '游꼙', '游볳', '游꼖', '游꼖' ],
                [ '游꼙', '游꼙', '游볳', '游볳', '游꼖', '游본', '游꼡', '游꼙' ],
                [ '游볳', '游볳', '游꼙', '游꼖', '游꼖', '游볳', '游꼙', '游꼡' ],
                [ '游꼙', '游꼙', '游꼖', '游꼡', '游꼡', '游볳', '游꼙', '游본' ],
                [ '游꼡', '游꼡', '游꼙', '游꼙', '游본', '游꼙', '游볳', '游볳' ],
                [ '游꼙', '游꼙', '游꼖', '游볳', '游꼙', '游꼡', '游볳', '游꼡' ],
                [ '游본', '游꼖', '游본', '游꼡', '游꼖', '游볳', '游꼖', '游꼙' ],
                [ '游볳', '游본', '游본', '游꼖', '游꼙', '游본', '游볳', '游꼖' ]
            ]);
        });
    });

    context('if there is no row to the right of selection', () => {
        it('should not swapRight', function() {
            grid = [
                [ '游볳', '游꼖', '游본', '游꼡', '游꼙', '游볳', '游꼖', '游꼖' ],
                [ '游꼙', '游꼙', '游볳', '游볳', '游꼖', '游본', '游꼡', '游꼙' ],
                [ '游볳', '游볳', '游꼙', '游꼖', '游꼖', '游볳', '游꼙', '游꼡' ],
                [ '游꼙', '游꼙', '游꼖', '游꼡', '游꼡', '游볳', '游꼙', '游본' ],
                [ '游꼡', '游꼡', '游꼙', '游꼙', '游본', '游꼙', '游볳', '游볳' ],
                [ '游꼙', '游꼙', '游꼖', '游볳', '游꼙', '游꼡', '游볳', '游꼡' ],
                [ '游본', '游꼖', '游본', '游꼡', '游꼖', '游볳', '游꼖', '游꼙' ],
                [ '游볳', '游본', '游본', '游꼖', '游꼙', '游본', '游볳', '游꼖' ]
            ];
            expect(Bejeweled.swapRight(grid, 2, grid[0].length - 1)).to.be.false;
            expect(grid).to.deep.equal([
                [ '游볳', '游꼖', '游본', '游꼡', '游꼙', '游볳', '游꼖', '游꼖' ],
                [ '游꼙', '游꼙', '游볳', '游볳', '游꼖', '游본', '游꼡', '游꼙' ],
                [ '游볳', '游볳', '游꼙', '游꼖', '游꼖', '游볳', '游꼙', '游꼡' ],
                [ '游꼙', '游꼙', '游꼖', '游꼡', '游꼡', '游볳', '游꼙', '游본' ],
                [ '游꼡', '游꼡', '游꼙', '游꼙', '游본', '游꼙', '游볳', '游볳' ],
                [ '游꼙', '游꼙', '游꼖', '游볳', '游꼙', '游꼡', '游볳', '游꼡' ],
                [ '游본', '游꼖', '游본', '游꼡', '游꼖', '游볳', '游꼖', '游꼙' ],
                [ '游볳', '游본', '游본', '游꼖', '游꼙', '游본', '游볳', '游꼖' ]
            ]);
        });
    });

    context('swap to remove combos', () => {
        it('should delete if matching more than 3 in a row', function() {
            grid = [
                [ '游볳', '游꼖', '游본', '游꼡', '游꼙' ],
                [ '游꼙', '游꼙', '游볳', '游볳', '游꼖' ],
                [ '游볳', '游볳', '游볳', '游꼖', '游꼖' ],
                [ '游꼙', '游꼙', '游꼖', '游꼡', '游꼡' ],
                [ '游꼡', '游꼡', '游꼙', '游꼙', '游본' ]
            ];
            Bejeweled.removeFruit(grid);
            expect(grid).to.deep.equal([
                [ '游볳', '游꼖', '游본', '游꼡', '游꼙' ],
                [ '游꼙', '游꼙', '游볳', '游볳', '游꼖' ],
                [ '  ', '  ', '  ', '游꼖', '游꼖' ],
                [ '游꼙', '游꼙', '游꼖', '游꼡', '游꼡' ],
                [ '游꼡', '游꼡', '游꼙', '游꼙', '游본' ]
            ]);
        });

        it('should delete if matching more than 3 in a col', function() {
            grid = [
                [ '游볳', '游꼖', '游본', '游꼡', '游꼙' ],
                [ '游꼙', '游꼙', '游볳', '游볳', '游꼖' ],
                [ '游꼖', '游볳', '游볳', '游볳', '游꼖' ],
                [ '游꼙', '游꼙', '游볳', '游꼡', '游꼡' ],
                [ '游꼡', '游꼡', '游꼙', '游꼙', '游본' ]
            ];
            Bejeweled.removeFruit(grid);
            expect(grid).to.deep.equal([
                [ '游볳', '游꼖', '游본', '游꼡', '游꼙' ],
                [ '游꼙', '游꼙', '  ', '游볳', '游꼖' ],
                [ '游꼖', '  ', '  ', '  ', '游꼖' ],
                [ '游꼙', '游꼙', '  ', '游꼡', '游꼡' ],
                [ '游꼡', '游꼡', '游꼙', '游꼙', '游본' ]
            ]);
        });
    });

    context('when fruit are removed', () => {
        it('should drop down fruits into empty lower spaces', function() {
            grid = [
                [ '游볳', '游꼖', '游본', '游꼡', '游꼙' ],
                [ '游꼙', '游꼙', '游볳', '游볳', '游꼖' ],
                [ '游꼖', '游볳', '游볳', '游볳', '游꼖' ],
                [ '游꼙', '游꼙', '游볳', '游꼡', '游꼡' ],
                [ '游꼡', '游꼡', '游꼙', '游꼙', '游본' ]
            ];
            Bejeweled.removeFruit(grid);
            Bejeweled.dropDown(grid);
            expect(grid).to.deep.equal([
                [ '游볳', '  ', '  ', '  ', '游꼙' ],
                [ '游꼙', '游꼖', '  ', '游꼡', '游꼖' ],
                [ '游꼖', '游꼙', '  ', '游볳', '游꼖' ],
                [ '游꼙', '游꼙', '游본', '游꼡', '游꼡' ],
                [ '游꼡', '游꼡', '游꼙', '游꼙', '游본' ]
            ]);
        });
    });
    // Add tests to check if there are no possible valid moves
    context('no possible valid moves', function() {
        it('should not change the grid as no matching', function() {
            grid = [
                [ '游볳', '游꼖', '游본', '游꼡'],
                [ '游꼙', '游꼙', '游꼡', '游볳'],
                [ '游꼖', '游볳', '游꼖', '游볳'],
                [ '游꼙', '游꼙', '游꼡', '游꼡']
            ];
            let combo = Bejeweled.removeFruit(grid);
            expect(combo).to.equal(0);
            expect(grid).to.deep.equal([
                [ '游볳', '游꼖', '游본', '游꼡'],
                [ '游꼙', '游꼙', '游꼡', '游볳'],
                [ '游꼖', '游볳', '游꼖', '游볳'],
                [ '游꼙', '游꼙', '游꼡', '游꼡']
            ]);
        });
    });
});
